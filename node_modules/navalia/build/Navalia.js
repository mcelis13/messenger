"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
const ChromeHelper_1 = require("./util/ChromeHelper");
const log = debug('navalia');
const isBusy = (chrome) => chrome.isFull();
const notBusy = (chrome) => !isBusy(chrome);
class Navalia {
    constructor(opts = {}) {
        this.numInstances = opts.numInstances || 1;
        this.maxJobs = opts.maxJobs || -1;
        this.workerTTL = opts.workerTTL || -1;
        this.chromeOptions = opts.chromeOptions || {};
        this.chromeInstances = [];
        this.queueList = [];
        log(`starting, using up to ${this.numInstances} instances`);
        for (let i = 0; i < this.numInstances; i++) {
            this.launchInstance(this.chromeOptions);
        }
        return;
    }
    destroy(chrome) {
        const instanceIndex = this.chromeInstances.indexOf(chrome);
        if (!chrome.isIdle()) {
            log(`instance ${chrome.port} still has active work, waiting till finished`);
            chrome.setExpired();
            return;
        }
        if (instanceIndex === -1) {
            return;
        }
        chrome.quit();
        this.chromeInstances.splice(instanceIndex, 1);
        this.launchInstance(this.chromeOptions);
        log(`instance ${chrome.port} successfully closed`);
    }
    execute(chromeHelper, queueItem) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!chromeHelper || (!queueItem || !queueItem.handler)) {
                throw new Error(`#execute was called with no instance of Chrome or a Job`);
            }
            chromeHelper.start((chrome) => __awaiter(this, void 0, void 0, function* () {
                log(`instance ${chromeHelper.port} is starting work`);
                try {
                    const result = yield queueItem.handler(chrome);
                    queueItem.resolve(result);
                }
                catch (error) {
                    queueItem.reject(error);
                }
                chrome.done();
                log(`instance ${chromeHelper.port} has completed work`);
                if (chromeHelper.isFull()) {
                    log(`instance ${chromeHelper.port} at max capacity, not taking work from queue`);
                    this.destroy(chromeHelper);
                    return;
                }
                if (chromeHelper.getIsExpired()) {
                    log(`instance ${chromeHelper.port} is expired and isn't taking new work`);
                    this.destroy(chromeHelper);
                    return;
                }
                if (chromeHelper.getJobsComplete() === this.maxJobs) {
                    log(`instance ${chromeHelper.port} has completed maximum jobs and is closing`);
                    this.destroy(chromeHelper);
                    return;
                }
                if (this.queueList.length) {
                    log(`instance ${chromeHelper.port} is taking work from the queue`);
                    return this.execute(chromeHelper, this.queueList.shift());
                }
            }));
        });
    }
    launchInstance(chromeOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const chromeHelper = new ChromeHelper_1.ChromeHelper(chromeOptions);
            this.chromeInstances.push(chromeHelper);
            if (this.queueList.length) {
                this.execute(chromeHelper, this.queueList.shift());
            }
            if (this.workerTTL > 0) {
                setTimeout(() => {
                    log(`instance ${chromeHelper.port} has reached expiration`);
                    this.destroy(chromeHelper);
                }, this.workerTTL);
            }
        });
    }
    kill() {
        return __awaiter(this, void 0, void 0, function* () {
            log(`:kill() > killing all instances regardless of work-in-progress`);
            return Promise.all(this.chromeInstances.map(chrome => chrome.quit()));
        });
    }
    run(handler) {
        return new Promise((resolve, reject) => {
            if (!this.chromeInstances.length || this.chromeInstances.every(isBusy)) {
                log('queueing work as all instances are busy');
                this.queueList.push({
                    handler,
                    resolve,
                    reject,
                });
                return;
            }
            log('instances are available and starting');
            this.execute(this.chromeInstances.find(notBusy), {
                handler,
                resolve,
                reject,
            });
        });
    }
}
exports.Navalia = Navalia;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF2YWxpYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9OYXZhbGlhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFHL0Isc0RBQTZFO0FBRTdFLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQW1CN0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFvQixFQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbEUsTUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFvQixFQUFXLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUVuRTtJQVFFLFlBQVksT0FBd0IsRUFBRTtRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQztRQUU5QyxJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUVwQixHQUFHLENBQUMseUJBQXlCLElBQUksQ0FBQyxZQUFZLFlBQVksQ0FBQyxDQUFDO1FBRTVELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxNQUFNLENBQUM7SUFDVCxD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
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug = require("debug");
const chromeUtil = require("./chrome");
const Chrome_1 = require("../Chrome");
const log = debug('navalia:chrome-helper');
class ChromeHelper {
    constructor(options) {
        this.isExpired = false;
        this.jobsComplete = 0;
        this.activeTabs = 0;
        this.maxActiveTabs = options.maxActiveTabs || -1;
        this.flags = options.flags || chromeUtil.defaultFlags;
        this.timeout = options.timeout || 1000;
        log(`using up to ${this.maxActiveTabs === -1 ? 'infinite' : this.maxActiveTabs} tabs`);
    }
    start(callback) {
        this.activeTabs++;
        if (!this.browserStartingPromise) {
            log(`starting chrome`);
            this.browserStartingPromise = chromeUtil.launch(this.flags, true);
        }
        this.browserStartingPromise
            .then(launched => {
            this.kill = launched.browser.kill;
            this.port = launched.browser.port;
            this.cdp = launched.cdp;
            log(`chrome on ${this.port} is running`);
            return chromeUtil.createTab(this.cdp, this.port);
        })
            .then(({ tab, targetId }) => {
            log(`chrome on ${this.port} launched a new tab at ${targetId}. current tabs: ${this.activeTabs}`);
            const newTab = new Chrome_1.Chrome({
                cdp: tab,
                flags: this.flags || chromeUtil.defaultFlags,
                timeout: this.timeout,
            });
            newTab.on('done', this.onTabClose.bind(this, targetId));
            callback(newTab);
        });
    }
    onTabClose(targetId) {
        this.cdp.Target.closeTarget({ targetId });
        this.activeTabs--;
        this.jobsComplete++;
        log(`chrome on ${this.port} tab ${targetId} has closed. active tabs: ${this.activeTabs}, completed jobs: ${this.jobsComplete}`);
    }
    quit() {
        return __awaiter(this, void 0, void 0, function* () {
            log(`closing chrome ${this.port}, completed jobs: ${this.jobsComplete}`);
            this.activeTabs = 0;
            yield this.cdp.close();
            return this.kill();
        });
    }
    setExpired() {
        log(`chrome on ${this.port} has been set expired, active tabs: ${this.activeTabs}`);
        this.isExpired = true;
    }
    isIdle() {
        return this.activeTabs === 0;
    }
    isFull() {
        return this.maxActiveTabs === this.activeTabs || this.isExpired;
    }
    getIsExpired() {
        return this.isExpired;
    }
    getJobsComplete() {
        return this.jobsComplete;
    }
}
exports.ChromeHelper = ChromeHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hyb21lSGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvQ2hyb21lSGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFFL0IsdUNBQXVDO0FBQ3ZDLHNDQUFtQztBQUVuQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQVEzQztJQWFFLFlBQVksT0FBZ0I7UUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssSUFBSSxVQUFVLENBQUMsWUFBWSxDQUFDO1FBQ3RELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUM7UUFFdkMsR0FBRyxDQUNELGVBQ0UsSUFBSSxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFDaEQsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBUU0sS0FBSyxDQUFDLFFBQVE7UUFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRWxCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQztZQUNqQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsc0JBQXNCLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BFLENBQUM7UUFFRCxJ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
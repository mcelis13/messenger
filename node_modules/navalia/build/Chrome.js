"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const path = require("path");
const fs = require("fs");
const debug = require("debug");
const chromeUtil = require("./util/chrome");
const dom_1 = require("./util/dom");
const log = debug('navalia:chrome');
const defaultDomOpts = {
    wait: true,
};
class Chrome extends events_1.EventEmitter {
    constructor(opts = {}) {
        super();
        this.styleSheetsLoaded = [];
        this.actionQueue = [];
        this.cdp = opts.cdp;
        this.flags = opts.flags || chromeUtil.defaultFlags;
        this.defaultTimeout = opts.timeout || 1000;
        this.remote = opts.remote;
    }
    getChromeCDP() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.cdp) {
                return this.cdp;
            }
            log(`:getChromeCDP() > ${this.remote
                ? `connecting to chrome at ${this.remote.host} on :${this.remote.port}`
                : `starting chrome`}`);
            const { browser, cdp } = yield chromeUtil.launch(this.flags || chromeUtil.defaultFlags, false, this.remote);
            log(`:getChromeCDP() > chrome launched on port ${browser.port}`);
            this.kill = browser.kill;
            this.cdp = cdp;
            return cdp;
        });
    }
    runScript(script, async = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            return yield cdp.Runtime.evaluate({
                expression: script,
                returnByValue: true,
                awaitPromise: async,
            });
        });
    }
    simulateKeyPress(type = 'char', key = null, modifiers = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            yield cdp.Input.dispatchKeyEvent({
                type,
                modifiers,
                text: key,
            });
        });
    }
    evalNow(expression, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const script = `
      (() => {
        const result = (${String(expression)}).apply(null, ${JSON.stringify(args)});
        if (result && result.then) {
          result.catch((error) => { throw new Error(error); });
          return result;
        }
        return Promise.resolve(result);
      })();
    `;
            log(`:evaluate() > executing function '${expression.name}' in Chrome`);
            const response = yield this.runScript(script, true);
            if (response && response.exceptionDetails) {
                throw new Error(response.exceptionDetails.exception.value ||
                    response.exceptionDetails.exception.description);
            }
            if (response && response.result) {
                return response.result.value;
            }
            return null;
        });
    }
    waitNow(waitParam, timeout) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof waitParam === 'number') {
                log(`:wait() > waiting ${waitParam} ms`);
                return new Promise(resolve => {
                    setTimeout(() => resolve(), waitParam);
                });
            }
            timeout = timeout || this.defaultTimeout;
            log(`:wait() > waiting for selector "${waitParam}" a maximum of ${timeout}ms`);
            yield this.evalNow(dom_1.waitForElement, waitParam, timeout);
            return true;
        });
    }
    focusNow(selector, opts = defaultDomOpts) {
        return __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:focus() > focusing '${selector}'`);
            const { root: { nodeId } } = yield cdp.DOM.getDocument();
            const node = yield cdp.DOM.querySelector({
                selector,
                nodeId,
            });
            if (!node) {
                throw new Error(`:focus() > Couldn't find element '${selector}' on the page.`);
            }
            yield cdp.DOM.focus({ nodeId: node.nodeId });
            return true;
        });
    }
    goto(url, opts = {
        onload: true,
        coverage: false,
    }) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            const waitForPageload = opts.onload === undefined ? true : opts.onload;
            const runCoverage = opts.coverage === undefined ? false : opts.coverage;
            if (runCoverage) {
                log(`:goto() > gathering coverage for ${url}`);
                yield cdp.Profiler.enable();
                yield cdp.Profiler.startPreciseCoverage();
                yield cdp.CSS.startRuleUsageTracking();
                cdp.CSS.styleSheetAdded(param => {
                    this.styleSheetsLoaded.push(param.header);
                });
            }
            log(`:goto() > going to ${url}`);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let hasResolved = false;
                let requestId = null;
                const timeoutId = setTimeout(() => reject(`Goto failed to load in the timeout specified`), opts.timeout || this.defaultTimeout);
                cdp.Network.requestWillBeSent(params => {
                    if (requestId)
                        return;
                    if (params.documentURL.includes(url.split('#')[0])) {
                        requestId = params.requestId;
                    }
                });
                cdp.Network.loadingFailed(params => {
                    if (hasResolved)
                        return;
                    if (params.requestId === requestId) {
                        hasResolved = true;
                        clearTimeout(timeoutId);
                        reject(params.errorText);
                    }
                });
                cdp.Network.loadingFinished((params) => __awaiter(this, void 0, void 0, function* () {
                    if (hasResolved)
                        return;
                    if (params.requestId === requestId) {
                        hasResolved = true;
                        clearTimeout(timeoutId);
                        if (waitForPageload) {
                            log(`:goto() > waiting for pageload on ${url}`);
                            yield cdp.Page.loadEventFired();
                        }
                        resolve(yield this.evalNow(dom_1.getPageURL));
                    }
                }));
            }));
        }));
        return this;
    }
    evaluate(expression, ...args) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            return this.evalNow(expression, ...args);
        }));
        return this;
    }
    reload(ignoreCache) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:reload() > reloading the page`);
            return cdp.Page.reload({ ignoreCache });
        }));
        return this;
    }
    screenshot(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            let screenOpts = {};
            if (opts.wait && selector) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:screenshot() > saving screenshot${selector ? `of element '${selector}'` : 'page'}`);
            if (selector) {
                const { root: { nodeId: documentNodeId }, } = yield cdp.DOM.getDocument();
                const { nodeId } = yield cdp.DOM.querySelector({
                    selector: selector,
                    nodeId: documentNodeId,
                });
                const { model } = yield cdp.DOM.getBoxModel({ nodeId });
                screenOpts = {
                    clip: {
                        x: model.content[0],
                        y: model.content[1],
                        width: model.width,
                        height: model.height,
                        scale: 1,
                    },
                };
            }
            const base64Image = yield cdp.Page.captureScreenshot(screenOpts);
            const buffer = new Buffer(base64Image.data, 'base64');
            return buffer;
        }));
        return this;
    }
    pdf(filePath) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:pdf() > saving PDF to ${filePath}`);
            const base64Image = yield cdp.Page.printToPDF();
            const buffer = new Buffer(base64Image.data, 'base64');
            if (filePath) {
                if (!path.isAbsolute(filePath)) {
                    throw new Error(`Filepath is not absolute: ${filePath}`);
                }
                return fs.writeFileSync(filePath, buffer, { encoding: 'base64' });
            }
            return buffer;
        }));
        return this;
    }
    size(width, height) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:size() > setting window size to ${width}x${height}`);
            yield cdp.Emulation.setVisibleSize({ width, height });
            yield cdp.Emulation.setDeviceMetricsOverride({
                width,
                height,
                deviceScaleFactor: 0,
                mobile: false,
                fitWindow: true,
            });
            return true;
        }));
        return this;
    }
    exists(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                try {
                    yield this.waitNow(selector, opts.timeout);
                }
                catch (error) {
                    return false;
                }
            }
            log(`:exists() > checking if '${selector}' exists`);
            return this.evalNow(selector => {
                const ele = document.querySelector(selector);
                return !!ele;
            }, selector);
        }));
        return this;
    }
    html(selector = 'html', opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:html() > getting '${selector}' HTML`);
            return this.evalNow(dom_1.html, selector);
        }));
        return this;
    }
    scroll(x = 0, y = 0) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            log(`:scroll() > scrolling to x = ${x} y = ${y}`);
            return this.evalNow((x, y) => {
                return window.scrollTo(x, y);
            }, x, y);
        }));
        return this;
    }
    clear() {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:clear() > clearing cookies and cache`);
            return Promise.all([
                cdp.Network.clearBrowserCookies,
                cdp.Network.clearBrowserCache,
            ]);
        }));
        return this;
    }
    text(selector = 'body', opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:text() > getting '${selector}' text`);
            return this.evalNow(function getText(selector) {
                const ele = document.querySelector(selector);
                if (!ele) {
                    throw new Error(`:text() > selector ${selector} wasn't found.`);
                }
                return ele.textContent;
            }, selector);
        }));
        return this;
    }
    fetch(...args) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:fetch() > fetching resource with args: ${JSON.stringify(args)}`);
            let requestFound = false;
            let requestHasResponded = false;
            let requestId = null;
            let response = {};
            cdp.Network.requestWillBeSent(params => {
                if (requestFound)
                    return;
                if (params.request.url === args[0]) {
                    requestFound = true;
                    requestId = params.requestId;
                }
            });
            cdp.Network.loadingFailed(params => {
                if (requestHasResponded)
                    return;
                if (params.requestId === requestId) {
                    response = Object.assign({}, response, {
                        error: params.errorText,
                    });
                }
            });
            cdp.Network.responseReceived(params => {
                if (requestHasResponded)
                    return;
                if (params.requestId === requestId) {
                    requestHasResponded = true;
                    response = params.response;
                }
            });
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const body = yield this.evalNow((...fetchArgs) => {
                    return fetch
                        .apply(null, fetchArgs)
                        .then(res => {
                        const contentType = res.headers.get('content-type');
                        if (!res.ok) {
                            throw res.statusText || res.status;
                        }
                        if (contentType &&
                            contentType.indexOf('application/json') !== -1) {
                            return res.json();
                        }
                        return res.text();
                    })
                        .catch(() => {
                        return null;
                    });
                }, ...args);
                return resolve(Object.assign({}, response, body ? { body } : null));
            }));
        }));
        return this;
    }
    save(filePath) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const htmlText = yield this.evalNow(dom_1.html, 'html');
            log(`:save() > saving page HTML to ${filePath}`);
            if (filePath) {
                try {
                    fs.writeFileSync(filePath, htmlText);
                    log(`:save() > page HTML saved successfully to ${filePath}`);
                    return true;
                }
                catch (error) {
                    log(`:save() > page HTML failed ${error.message}`);
                    return false;
                }
            }
            return htmlText;
        }));
        return this;
    }
    click(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:click() > clicking '${selector}'`);
            return this.evalNow(dom_1.click, selector);
        }));
        return this;
    }
    focus(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            return this.focusNow(selector, opts);
        }));
        return this;
    }
    header(headerObj) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:header() > applying ${JSON.stringify(headerObj)} to all requests`);
            yield cdp.Network.setExtraHTTPHeaders({
                headers: { headerObj },
            });
            return headerObj;
        }));
        return this;
    }
    type(selector, value, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            yield this.focusNow(selector, { wait: false });
            log(`:type() > typing text '${value}' into '${selector}'`);
            const keys = value.split('') || [];
            yield Promise.all(keys.map((key) => __awaiter(this, void 0, void 0, function* () { return this.simulateKeyPress('char', key); })));
            return true;
        }));
        return this;
    }
    check(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:check() > checking checkbox '${selector}'`);
            return this.evalNow(selector => {
                var element = document.querySelector(selector);
                if (element) {
                    element.checked = true;
                    return true;
                }
                throw new Error(`:check() > selector ${selector} doesn't exist.`);
            }, selector);
        }));
        return this;
    }
    uncheck(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:uncheck() > un-checking checkbox '${selector}'`);
            return this.evalNow(selector => {
                var element = document.querySelector(selector);
                if (!element) {
                    throw new Error(`:uncheck() > Couldn't find '${selector}' on page.`);
                }
                element.checked = false;
                return true;
            }, selector);
        }));
        return this;
    }
    select(selector, option, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:select() > selecting option '${option}' in '${selector}'`);
            return this.evalNow(selector => {
                var element = document.querySelector(selector);
                if (element) {
                    element.value = option;
                    return true;
                }
                return false;
            }, selector);
        }));
        return this;
    }
    visible(selector, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:visible() > seeing if '${selector}' is visible`);
            return this.evalNow(selector => {
                var element = document.querySelector(selector);
                if (!element) {
                    throw new Error(`:visible() > Couldn't find '${selector}' on page.`);
                }
                let style;
                try {
                    style = window.getComputedStyle(element);
                }
                catch (e) {
                    return false;
                }
                if (style.visibility === 'hidden' || style.display === 'none') {
                    return false;
                }
                if (style.display === 'inline' ||
                    style.display === 'inline-block' ||
                    style.display === 'flex') {
                    return true;
                }
                return element.offsetWidth > 0 && element.offsetHeight > 0;
            }, selector);
        }));
        return this;
    }
    wait(waitParam, timeout) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (typeof waitParam === 'number') {
                log(`:wait() > waiting ${waitParam} ms`);
                return new Promise(resolve => {
                    setTimeout(() => resolve(), waitParam);
                });
            }
            timeout = timeout || this.defaultTimeout;
            log(`:wait() > waiting for selector "${waitParam}" a maximum of ${timeout}ms`);
            yield this.evalNow(dom_1.waitForElement, waitParam, timeout);
            return true;
        }));
        return this;
    }
    inject(src) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const fileContents = fs.readFileSync(src, { encoding: 'utf-8' });
            const extension = path.extname(src);
            if (extension === '.js') {
                log(`:inject() > injecting JavaScript file from ${src}`);
                yield this.runScript(fileContents);
                return true;
            }
            if (extension === '.css') {
                log(`:inject() > injecting CSS file from ${src}`);
                const cssInjectScript = function (content) {
                    const link = document.createElement('link');
                    link.rel = 'stylesheet';
                    link.innerHTML = content;
                    document.body.appendChild(link);
                };
                yield this.evalNow(cssInjectScript, fileContents);
                return true;
            }
            throw new Error(`:inject() > Unknown extension ${extension}`);
        }));
        return this;
    }
    pageload() {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:pageload() > waiting for pageload to be called`);
            yield cdp.Page.loadEventFired();
            return true;
        }));
        return this;
    }
    cookie(name, value) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:cookie() > ${value
                ? `setting cookie ${name} to ${value}`
                : name ? `getting cookie ${name}` : `getting all cookies`}`);
            const { cookies } = yield cdp.Network.getAllCookies();
            if (value) {
                const url = yield this.evalNow(() => window.location.href);
                const isSet = yield cdp.Network.setCookie({ url, name, value });
                return isSet ? [{ name, value }] : null;
            }
            if (name) {
                const cookie = cookies.find(cookie => cookie.name === name);
                return cookie ? [{ name, value: cookie.value }] : null;
            }
            return cookies.map(cookie => ({
                name: cookie.name,
                value: cookie.value,
            }));
        }));
        return this;
    }
    back() {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            log(`:back() > going back in history`);
            return this.evalNow(() => {
                return window.history.back();
            });
        }));
        return this;
    }
    forward() {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            log(`:forward() > going forward in history`);
            return this.evalNow(() => {
                return window.history.forward();
            });
        }));
        return this;
    }
    attr(selector, attribute, opts = defaultDomOpts) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            if (opts.wait) {
                yield this.waitNow(selector, opts.timeout);
            }
            log(`:attr() > getting '${selector}' attribute '${attribute}'`);
            return this.evalNow((selector, attribute) => {
                const ele = document.querySelector(selector);
                if (ele) {
                    return ele.getAttribute(attribute);
                }
                return null;
            }, selector, attribute);
        }));
        return this;
    }
    auth(username = '', password = '') {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            log(`:auth() > using username '${username}' and password '${password}' for auth requests`);
            const cdp = yield this.getChromeCDP();
            yield cdp.Network.setRequestInterceptionEnabled({ enabled: true });
            cdp.Network.requestIntercepted(params => {
                cdp.Network.continueInterceptedRequest({
                    interceptionId: params.interceptionId,
                    authChallengeResponse: params.authChallenge
                        ? {
                            username: username,
                            password: password,
                            response: 'ProvideCredentials',
                        }
                        : undefined,
                });
            });
        }));
        return this;
    }
    coverage(src) {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            const cdp = yield this.getChromeCDP();
            log(`:coverage() > getting coverage stats for ${src}`);
            const jsCoverages = yield cdp.Profiler.takePreciseCoverage();
            const jsCoverage = jsCoverages.result.find(scriptCoverage => scriptCoverage.url === src);
            const styleSheet = this.styleSheetsLoaded.find(css => css.sourceURL === src);
            const { coverage: cssCoverages } = yield cdp.CSS.takeCoverageDelta();
            const startingResults = { total: 0, unused: 0 };
            yield cdp.Profiler.stopPreciseCoverage();
            yield cdp.CSS.stopRuleUsageTracking();
            if (!jsCoverage && !styleSheet) {
                throw new Error(`Couldn't locate script ${src} on the page.`);
            }
            if (styleSheet && styleSheet.styleSheetId) {
                const coverageCollection = cssCoverages.filter(coverage => coverage.styleSheetId === styleSheet.styleSheetId);
                const usedInfo = coverageCollection.reduce((rangeAccum, range) => {
                    const total = range.endOffset > rangeAccum.total
                        ? range.endOffset
                        : rangeAccum.total;
                    const used = range.used ? range.endOffset - range.startOffset : 0;
                    return {
                        total,
                        used: rangeAccum.used + used,
                    };
                }, { total: 0, used: 0 });
                return {
                    total: usedInfo.total,
                    unused: usedInfo.total - usedInfo.used,
                    percentUnused: (usedInfo.total - usedInfo.used) / usedInfo.total,
                };
            }
            if (jsCoverage && jsCoverage.functions && jsCoverage.functions.length) {
                const coverageData = jsCoverage.functions.reduce((fnAccum, coverageStats) => {
                    const functionStats = coverageStats.ranges.reduce((rangeAccum, range) => {
                        return {
                            total: range.endOffset > rangeAccum.total
                                ? range.endOffset
                                : rangeAccum.total,
                            unused: rangeAccum.unused +
                                (range.count === 0
                                    ? range.endOffset - range.startOffset
                                    : 0),
                        };
                    }, startingResults);
                    return {
                        total: functionStats.total > fnAccum.total
                            ? functionStats.total
                            : fnAccum.total,
                        unused: fnAccum.unused + functionStats.unused,
                    };
                }, startingResults);
                return Object.assign({}, coverageData, { percentUnused: coverageData.unused / coverageData.total });
            }
            throw new Error(`Couldn't parse code coverge for script ${src}`);
        }));
        return this;
    }
    then(handler) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            const actions = this.actionQueue.map((handler) => ({
                handler,
                retries: 1,
            }));
            return new Promise((resolve, reject) => {
                log(`:then() > Executing ${this.actionQueue.length} actions`);
                const executePromiseAtIndex = idx => {
                    return actions[idx]
                        .handler()
                        .then(res => {
                        const nextIndex = idx + 1;
                        results.push(res);
                        if (!actions[nextIndex]) {
                            this.actionQueue = [];
                            return resolve(handler(results.length === 1 ? results[0] : results));
                        }
                        return executePromiseAtIndex(nextIndex);
                    })
                        .catch(error => {
                        if (!actions[idx].retries) {
                            return reject(error);
                        }
                        log(`:WARN > Retrying ${actions[idx].retries} time(s) due to issue: '${error}'`);
                        actions[idx] = {
                            retries: actions[idx].retries - 1,
                            handler: actions[idx].handler,
                        };
                        return executePromiseAtIndex(idx);
                    });
                };
                executePromiseAtIndex(0);
            });
        });
    }
    end() {
        this.actionQueue.push(() => __awaiter(this, void 0, void 0, function* () {
            yield this.done();
            return true;
        }));
        return this;
    }
    done() {
        log(`:done() > finished`);
        this.actionQueue = [];
        if (this.kill) {
            log(`:done() > closing chrome`);
            this.kill();
        }
        this.emit('done');
    }
}
exports.Chrome = Chrome;
//# sourceMappingURL=data:application/json;base64,
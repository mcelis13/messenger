{"ast":null,"code":"import _defineProperty from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maddie/Desktop/messengerFront/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/maddie/Desktop/messengerFront/src/components/Conversation.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { singleConversation as _singleConversation } from '../actions/actions';\nimport { getMessages as _getMessages } from '../actions/actions';\nimport { sendMessage as _sendMessage } from '../actions/actions';\nimport socket from '../sockets';\nimport Message from './Message';\nimport scrollToComponent from 'react-scroll-to-component';\n\nvar Conversation =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Conversation, _Component);\n\n  function Conversation() {\n    var _this;\n\n    _classCallCheck(this, Conversation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Conversation).call(this));\n\n    _this.handleChange = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.sendNewMessage = function (event) {\n      event.preventDefault();\n      var conversationId = _this.props.currentConversation.conversationId;\n      var token = localStorage.token;\n      var message = _this.state.newMessage; //needs conversationId, user token, message\n\n      _this.props.sendMessage(conversationId, token, message).then(function (resp) {\n        return socket.emit('enter conversation', conversationId);\n      });\n\n      _this.setState({\n        newMessage: ''\n      });\n    };\n\n    _this.state = {\n      newMessage: ''\n    };\n    return _this;\n  } //\n  // componentDidMount(){\n  //   if(this.props.history && this.props.history.location.pathname.slice(15) != undefined){\n  //     let conversationId = this.props.history.location.pathname.slice(15);\n  //     this.props.getMessages()\n  //     // this.props.singleConversation(conversationId)\n  //     //debugger\n  //     this.findMessages(conversationId)\n  //     socket.emit('enter conversation', conversationId);\n  //   }else{\n  //     let conversationId = this.props.conversation._id;\n  //     this.props.getMessages()\n  //     this.props.singleConversation(conversationId)\n  //     this.findMessages(conversationId)\n  //     socket.emit('enter conversation', conversationId);\n  //   }\n  //\n  // }\n  //\n  // getConversationId = () => {\n  //\n  //   if(this.props.history.location.pathname.slice(15) === true){\n  //     let conversationId = this.props.history.location.pathname.slice(15);\n  //     return conversationId;\n  //\n  //   }else if(this.props.history.location.pathname.slice(15) === false){\n  //     let conversationId = this.props.conversation._id;\n  //     return conversationId;\n  //   }\n  // }\n  //\n  // fullName = () => {\n  //   if(!this.props.currentUser){\n  //     let firstName = this.props.currentUser.profile.firstName;\n  //     let lastName = this.props.currentUser.profile.lastName;\n  //     let fullName = `${firstName} ${lastName}`\n  //     return fullName;\n  //   }\n  // }\n  //\n  // findMessages = (currentConversationId) => {\n  //   let conversationMessages = this.props.messages.filter(message => message.conversationId === currentConversationId)\n  //   let copyOfMessages = [...conversationMessages];\n  //   this.setState({conversationMessages: copyOfMessages})\n  // }\n  //\n\n\n  _createClass(Conversation, [{\n    key: \"render\",\n    value: function render() {\n      //console.log(this.props.recipient, 'consoling recipient in conversation')\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          width: '100%',\n          height: '150px',\n          overflow: 'scroll'\n        },\n        className: \"ui large card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, this.props.currentConversation.messages ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"left floated meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, this.props.currentConversation.messages.map(function (message) {\n        return React.createElement(Message, {\n          key: message._id,\n          message: message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      }))) : React.createElement(\"div\", {\n        style: {\n          height: '100%',\n          'padding-top': '32px'\n        },\n        onClick: this.handleClick,\n        className: \"ui small card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"right floated meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"SELECT THE CONVERSATION YOU WOULD LIKE TO VIEW\")))), this.props.currentConversation.messages ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: this.handleChange,\n        name: \"newMessage\",\n        value: this.state.newMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))), React.createElement(\"button\", {\n        className: \"ui green basic button\",\n        onClick: this.sendNewMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Send\")) : null);\n    }\n  }]);\n\n  return Conversation;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return state;\n};\n\nvar dispatchStateToProps = function dispatchStateToProps(dispatch) {\n  return {\n    singleConversation: function singleConversation(conversationId) {\n      return dispatch(_singleConversation(conversationId));\n    },\n    getMessages: function getMessages() {\n      return dispatch(_getMessages());\n    },\n    sendMessage: function sendMessage(conversationId, token, message) {\n      return dispatch(_sendMessage(conversationId, token, message));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, dispatchStateToProps)(Conversation);","map":{"version":3,"sources":["/Users/maddie/Desktop/messengerFront/src/components/Conversation.js"],"names":["React","Component","connect","singleConversation","getMessages","sendMessage","socket","Message","scrollToComponent","Conversation","handleChange","event","setState","target","name","value","sendNewMessage","preventDefault","conversationId","props","currentConversation","token","localStorage","message","state","newMessage","then","resp","emit","width","height","overflow","messages","map","_id","handleClick","mapStateToProps","dispatchStateToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { singleConversation } from '../actions/actions';\nimport { getMessages } from '../actions/actions';\nimport { sendMessage } from '../actions/actions';\nimport socket from '../sockets';\nimport Message from './Message';\nimport scrollToComponent from 'react-scroll-to-component';\n\n\nclass Conversation extends  Component {\n\n  constructor(){\n    super()\n    this.state = {\n      newMessage: ''\n    }\n  }\n  //\n  // componentDidMount(){\n  //   if(this.props.history && this.props.history.location.pathname.slice(15) != undefined){\n  //     let conversationId = this.props.history.location.pathname.slice(15);\n  //     this.props.getMessages()\n  //     // this.props.singleConversation(conversationId)\n  //     //debugger\n  //     this.findMessages(conversationId)\n  //     socket.emit('enter conversation', conversationId);\n  //   }else{\n  //     let conversationId = this.props.conversation._id;\n  //     this.props.getMessages()\n  //     this.props.singleConversation(conversationId)\n  //     this.findMessages(conversationId)\n  //     socket.emit('enter conversation', conversationId);\n  //   }\n  //\n  // }\n  //\n  // getConversationId = () => {\n  //\n  //   if(this.props.history.location.pathname.slice(15) === true){\n  //     let conversationId = this.props.history.location.pathname.slice(15);\n  //     return conversationId;\n  //\n  //   }else if(this.props.history.location.pathname.slice(15) === false){\n  //     let conversationId = this.props.conversation._id;\n  //     return conversationId;\n  //   }\n  // }\n  //\n  // fullName = () => {\n  //   if(!this.props.currentUser){\n  //     let firstName = this.props.currentUser.profile.firstName;\n  //     let lastName = this.props.currentUser.profile.lastName;\n  //     let fullName = `${firstName} ${lastName}`\n  //     return fullName;\n  //   }\n  // }\n  //\n  // findMessages = (currentConversationId) => {\n  //   let conversationMessages = this.props.messages.filter(message => message.conversationId === currentConversationId)\n  //   let copyOfMessages = [...conversationMessages];\n  //   this.setState({conversationMessages: copyOfMessages})\n  // }\n  //\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n  //\n  sendNewMessage = (event) => {\n    event.preventDefault();\n    let conversationId = this.props.currentConversation.conversationId;\n    let token = localStorage.token;\n    let message = this.state.newMessage\n    //needs conversationId, user token, message\n    this.props.sendMessage(conversationId, token, message)\n      .then(resp => socket.emit('enter conversation', conversationId));\n    this.setState({newMessage: ''})\n  }\n\n\n  render(){\n    //console.log(this.props.recipient, 'consoling recipient in conversation')\n    return(\n      <div>\n        <div style={{width: '100%', height: '150px', overflow: 'scroll'}}className=\"ui large card\">\n          {this.props.currentConversation.messages ? (<div>\n          <div className='left floated meta'>{this.props.currentConversation.messages.map((message) => <Message key={message._id} message={message}/>)}</div>\n          </div>): <div style={{height: '100%', 'padding-top': '32px'}}onClick={this.handleClick} className=\"ui small card\">\n            <div className=\"content\">\n              <div className=\"right floated meta\">SELECT THE CONVERSATION YOU WOULD LIKE TO VIEW</div>\n            </div>\n          </div>}\n        </div>\n\n        {this.props.currentConversation.messages ? <div><div className=\"ui form\">\n          <div className=\"field\">\n            <input type='text' onChange={this.handleChange} name='newMessage' value={this.state.newMessage} />\n          </div>\n        </div><button className='ui green basic button'onClick={this.sendNewMessage}>Send</button></div> : null}\n      </div>\n  )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return state\n}\n\nconst dispatchStateToProps = (dispatch) => {\n  return {\n    singleConversation: (conversationId) => dispatch(singleConversation(conversationId)),\n    getMessages: () => dispatch(getMessages()),\n    sendMessage: (conversationId, token, message) => dispatch(sendMessage(conversationId, token, message))\n  }\n}\n\nexport default connect(mapStateToProps, dispatchStateToProps)(Conversation);\n"]},"metadata":{},"sourceType":"module"}
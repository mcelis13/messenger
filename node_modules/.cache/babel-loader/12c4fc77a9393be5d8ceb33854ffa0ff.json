{"ast":null,"code":"import { browserHistory } from 'react-router';\nimport jwt_decode from 'jwt-decode';\nimport socket from '../sockets.js';\nvar API = 'http://localhost:3000/api';\nexport var errorHandler = function errorHandler(dispatch, error, type) {\n  var errorMessage = '';\n\n  if (error.data.error) {\n    errorMessage = error.data.error;\n  } else if (error.data) {\n    errorMessage = error.data;\n  } else {\n    errorMessage = error;\n  }\n\n  if (error.status === 401) {\n    dispatch({\n      type: type,\n      payload: 'You are not authorized to do this. Please login and try again.'\n    });\n    logoutUser();\n  } else {\n    dispatch({\n      type: type,\n      payload: errorMessage\n    });\n  }\n};\nexport var loginUser = function loginUser(data) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/auth/login\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      console.log(resp, 'from actions.js');\n      localStorage.setItem('token', resp.token);\n      dispatch({\n        type: 'LOGIN_USER',\n        payload: resp.user\n      });\n    });\n  };\n};\nexport var registerUser = function registerUser(data) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/auth/register\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify(data)\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      var user = jwt_decode(resp.token);\n      console.log(user, 'I am inside of register user');\n      localStorage.setItem('token', resp.token);\n      dispatch({\n        type: 'REGISTER_USER',\n        payload: resp.user\n      });\n    });\n  };\n};\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    dispatch({\n      type: 'LOGOUT_USER'\n    });\n    localStorage.removeItem('token', {\n      path: '/'\n    });\n    socket.emit('disconnect');\n  };\n};\nexport var getConversations = function getConversations(token) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/chat/conversations\"), {\n      method: 'GET',\n      headers: {\n        \"Authorization\": token,\n        \"Content-Type\": 'application/json'\n      }\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'GET_CONVERSATIONS',\n        payload: resp\n      });\n      return resp;\n    }).catch(console.error);\n  };\n};\nexport var getMessages = function getMessages() {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/chat/messages\")).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'GET_MESSAGES',\n        payload: resp\n      });\n      return resp;\n    }).catch(console.error);\n  };\n};\nexport var sendMessage = function sendMessage(conversationId, token, state) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/chat/conversations/\").concat(conversationId), {\n      method: 'POST',\n      headers: {\n        \"Authorization\": token,\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({\n        'composedMessage': state\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      console.log(resp, 'this is inside sendMessage');\n      dispatch({\n        type: 'SEND_MESSAGE',\n        payload: resp\n      });\n      socket.emit('new message', resp);\n      return resp;\n    }).catch(console.error);\n  };\n};\nexport var singleConversation = function singleConversation(conversationId) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/chat/conversations/\").concat(conversationId)).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'CURRENT_CONVERSATION',\n        payload: resp\n      });\n      return resp;\n    }).catch(console.error);\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    fetch(\"\".concat(API, \"/chat/users\")).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'GET_USERS',\n        payload: resp\n      });\n    }).catch(console.error);\n  };\n};\nexport var newConversation = function newConversation(token, recipientId, message) {\n  return function (dispatch) {\n    return fetch(\"\".concat(API, \"/chat/new/\").concat(recipientId), {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify({\n        'composedMessage': message\n      })\n    }).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'CURRENT_CONVERSATION',\n        payload: resp\n      });\n      return resp;\n    }).catch(console.error);\n  };\n}; //action creator which returns an action\n\nexport var setRecipientState = function setRecipientState(recipient) {\n  return {\n    type: 'SET_RECIPIENT',\n    payload: recipient\n  };\n};\nexport var getUserAgain = function getUserAgain(token) {\n  var user = jwt_decode(token);\n  var id = user._id;\n  return function (dispatch) {\n    fetch(\"\".concat(API, \"/chat/users/\").concat(id)).then(function (resp) {\n      return resp.json();\n    }).then(function (resp) {\n      dispatch({\n        type: 'GET_USER_AGAIN',\n        payload: resp\n      });\n    }).catch(console.error);\n  };\n};","map":{"version":3,"sources":["/Users/maddie/Desktop/messengerFront/src/actions/actions.js"],"names":["browserHistory","jwt_decode","socket","API","errorHandler","dispatch","error","type","errorMessage","data","status","payload","logoutUser","loginUser","fetch","method","headers","body","JSON","stringify","then","resp","json","console","log","localStorage","setItem","token","user","registerUser","removeItem","path","emit","getConversations","catch","getMessages","sendMessage","conversationId","state","singleConversation","getUsers","newConversation","recipientId","message","setRecipientState","recipient","getUserAgain","id","_id"],"mappings":"AAAA,SAASA,cAAT,QAA+B,cAA/B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAGA,IAAMC,GAAG,GAAG,2BAAZ;AAGA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,KAAX,EAAkBC,IAAlB,EAA2B;AACrD,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAGF,KAAK,CAACG,IAAN,CAAWH,KAAd,EAAoB;AAClBE,IAAAA,YAAY,GAAGF,KAAK,CAACG,IAAN,CAAWH,KAA1B;AACD,GAFD,MAEM,IAAGA,KAAK,CAACG,IAAT,EAAc;AAClBD,IAAAA,YAAY,GAAGF,KAAK,CAACG,IAArB;AACD,GAFK,MAED;AACHD,IAAAA,YAAY,GAAGF,KAAf;AACD;;AAED,MAAGA,KAAK,CAACI,MAAN,KAAiB,GAApB,EAAwB;AACtBL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAGA,IADA;AAEPI,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;AAIAC,IAAAA,UAAU;AACX,GAND,MAMK;AACHP,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEA,IADC;AAEPI,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID;AACF,CAvBM;AA0BP,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACJ,IAAD,EAAU;AACjC,SAAO,UAACJ,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,kBAAqB;AAC/BY,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFsB;AAK/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AALyB,KAArB,CAAL,CAQNW,IARM,CAQD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KARH,EASNF,IATM,CASD,UAAAC,IAAI,EAAI;AACVE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkB,iBAAlB;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,KAAnC;AACAtB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,YAAP;AAAqBI,QAAAA,OAAO,EAAEU,IAAI,CAACO;AAAnC,OAAD,CAAR;AACH,KAbM,CAAP;AAcD,GAfD;AAgBD,CAjBM;AAmBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACpB,IAAD,EAAU;AACpC,SAAO,UAACJ,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,qBAAyB;AACnCY,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAF0B;AAKnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AAL6B,KAAzB,CAAL,CAQNW,IARM,CAQD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KARH,EASNF,IATM,CASD,UAAAC,IAAI,EAAI;AACZ,UAAMO,IAAI,GAAG3B,UAAU,CAACoB,IAAI,CAACM,KAAN,CAAvB;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ,EAAkB,8BAAlB;AACEH,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,KAAnC;AAEAtB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAE,eAAP;AAAwBI,QAAAA,OAAO,EAAEU,IAAI,CAACO;AAAtC,OAAD,CAAR;AACH,KAhBM,CAAP;AAiBD,GAlBD;AAmBD,CApBM;AAsBP,OAAO,IAAMhB,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9B,SAAO,UAACP,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAkB,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB,EAAiC;AAACC,MAAAA,IAAI,EAAE;AAAP,KAAjC;AACA7B,IAAAA,MAAM,CAAC8B,IAAP,CAAY,YAAZ;AACD,GAJD;AAKD,CANM;AAQP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,KAAD,EAAW;AACzC,SAAO,UAACtB,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,0BAA6B;AACvCY,MAAAA,MAAM,EAAC,KADgC;AAEvCC,MAAAA,OAAO,EAAE;AACP,yBAAiBW,KADV;AAEP,wBAAgB;AAFT;AAF8B,KAA7B,CAAL,CAONP,IAPM,CAOD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KAPH,EAQNF,IARM,CAQD,UAAAC,IAAI,EAAI;AACZhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,mBAAN;AAA2BI,QAAAA,OAAO,EAAEU;AAApC,OAAD,CAAR;AACA,aAAOA,IAAP;AACD,KAXM,EAYNa,KAZM,CAYAX,OAAO,CAACjB,KAZR,CAAP;AAaD,GAdD;AAeD,CAhBM;AAkBP,OAAO,IAAM6B,WAAW,GAAG,SAAdA,WAAc,GAAM;AAC/B,SAAO,UAAC9B,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,oBAAL,CACNiB,IADM,CACD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KADH,EAENF,IAFM,CAED,UAAAC,IAAI,EAAI;AACZhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,cAAN;AAAsBI,QAAAA,OAAO,EAAEU;AAA/B,OAAD,CAAR;AACA,aAAOA,IAAP;AACD,KALM,EAMNa,KANM,CAMAX,OAAO,CAACjB,KANR,CAAP;AAOD,GARD;AAUD,CAXM;AAaP,OAAO,IAAM8B,WAAW,GAAG,SAAdA,WAAc,CAACC,cAAD,EAAiBV,KAAjB,EAAwBW,KAAxB,EAAkC;AAC3D,SAAO,UAACjC,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,iCAA8BkC,cAA9B,GAAgD;AAC1DtB,MAAAA,MAAM,EAAE,MADkD;AAE1DC,MAAAA,OAAO,EAAE;AACP,yBAAiBW,KADV;AAEP,wBAAgB;AAFT,OAFiD;AAM1DV,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,2BAAmBmB;AAApB,OAAf;AANoD,KAAhD,CAAL,CAQNlB,IARM,CAQD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KARH,EASNF,IATM,CASD,UAAAC,IAAI,EAAI;AACZE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkB,4BAAlB;AACAhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,cAAN;AAAsBI,QAAAA,OAAO,EAAEU;AAA/B,OAAD,CAAR;AACAnB,MAAAA,MAAM,CAAC8B,IAAP,CAAY,aAAZ,EAA2BX,IAA3B;AACA,aAAOA,IAAP;AACD,KAdM,EAeNa,KAfM,CAeAX,OAAO,CAACjB,KAfR,CAAP;AAgBD,GAjBD;AAkBD,CAnBM;AAqBP,OAAO,IAAMiC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACF,cAAD,EAAoB;AACpD,SAAO,UAAChC,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,iCAA8BkC,cAA9B,EAAL,CACNjB,IADM,CACD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KADH,EAENF,IAFM,CAED,UAAAC,IAAI,EAAI;AACZhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,sBAAN;AAA8BI,QAAAA,OAAO,EAAEU;AAAvC,OAAD,CAAR;AACA,aAAOA,IAAP;AACD,KALM,EAMNa,KANM,CAMAX,OAAO,CAACjB,KANR,CAAP;AAOD,GARD;AASD,CAVM;AAYP,OAAO,IAAMkC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC5B,SAAO,UAACnC,QAAD,EAAc;AACnBS,IAAAA,KAAK,WAAIX,GAAJ,iBAAL,CACCiB,IADD,CACM,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KADV,EAECF,IAFD,CAEM,UAAAC,IAAI,EAAI;AACZhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,WAAN;AAAmBI,QAAAA,OAAO,EAAEU;AAA5B,OAAD,CAAR;AACD,KAJD,EAKCa,KALD,CAKOX,OAAO,CAACjB,KALf;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,IAAMmC,eAAe,GAAG,SAAlBA,eAAkB,CAACd,KAAD,EAAQe,WAAR,EAAqBC,OAArB,EAAiC;AAC9D,SAAO,UAACtC,QAAD,EAAc;AACnB,WAAOS,KAAK,WAAIX,GAAJ,uBAAoBuC,WAApB,GAAmC;AAC7C3B,MAAAA,MAAM,EAAC,MADsC;AAE7CC,MAAAA,OAAO,EAAC;AACN,wBAAgB,kBADV;AAEN,yBAAiBW;AAFX,OAFqC;AAM7CV,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAC,2BAAmBwB;AAApB,OAAf;AANuC,KAAnC,CAAL,CAQNvB,IARM,CAQD,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KARH,EASNF,IATM,CASD,UAAAC,IAAI,EAAI;AACVhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,sBAAN;AAA8BI,QAAAA,OAAO,EAAEU;AAAvC,OAAD,CAAR;AACA,aAAOA,IAAP;AACH,KAZM,EAaNa,KAbM,CAaAX,OAAO,CAACjB,KAbR,CAAP;AAcD,GAfD;AAgBD,CAjBM,C,CAmBP;;AACA,OAAO,IAAMsC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAe;AAC9C,SAAO;AAACtC,IAAAA,IAAI,EAAE,eAAP;AAAwBI,IAAAA,OAAO,EAAEkC;AAAjC,GAAP;AACD,CAFM;AAIP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACnB,KAAD,EAAW;AACrC,MAAMC,IAAI,GAAG3B,UAAU,CAAC0B,KAAD,CAAvB;AACA,MAAMoB,EAAE,GAAGnB,IAAI,CAACoB,GAAhB;AACA,SAAO,UAAC3C,QAAD,EAAc;AACnBS,IAAAA,KAAK,WAAIX,GAAJ,yBAAsB4C,EAAtB,EAAL,CACC3B,IADD,CACM,UAAAC,IAAI;AAAA,aAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,KADV,EAECF,IAFD,CAEM,UAAAC,IAAI,EAAI;AACZhB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,gBAAN;AAAwBI,QAAAA,OAAO,EAAEU;AAAjC,OAAD,CAAR;AACD,KAJD,EAKCa,KALD,CAKOX,OAAO,CAACjB,KALf;AAMD,GAPD;AAQD,CAXM","sourcesContent":["import { browserHistory } from 'react-router';\nimport jwt_decode from 'jwt-decode';\nimport socket from '../sockets.js';\n\n\nconst API = 'http://localhost:3000/api';\n\n\nexport const errorHandler = (dispatch, error, type) => {\n  let errorMessage = '';\n\n  if(error.data.error){\n    errorMessage = error.data.error;\n  }else if(error.data){\n    errorMessage = error.data;\n  }else{\n    errorMessage = error;\n  }\n\n  if(error.status === 401){\n    dispatch({\n      type : type,\n      payload: 'You are not authorized to do this. Please login and try again.'\n    });\n    logoutUser();\n  }else{\n    dispatch({\n      type: type,\n      payload: errorMessage\n    })\n  }\n}\n\n\nexport const loginUser = (data) => {\n  return (dispatch) => {\n    return fetch(`${API}/auth/login`,{\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n      },\n      body: JSON.stringify(data)\n\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n        console.log(resp, 'from actions.js')\n        localStorage.setItem('token', resp.token);\n        dispatch({type: 'LOGIN_USER', payload: resp.user});\n    })\n  };\n};\n\nexport const registerUser = (data) => {\n  return (dispatch) => {\n    return fetch(`${API}/auth/register`, {\n      method: \"POST\",\n      headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n      },\n      body: JSON.stringify(data)\n\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n      const user = jwt_decode(resp.token)\n\n      console.log(user, 'I am inside of register user')\n        localStorage.setItem('token', resp.token);\n\n        dispatch({type: 'REGISTER_USER', payload: resp.user});\n    })\n  }\n}\n\nexport const logoutUser = () => {\n  return (dispatch) => {\n    dispatch({type: 'LOGOUT_USER'});\n    localStorage.removeItem('token', {path: '/'})\n    socket.emit('disconnect')\n  }\n}\n\nexport const getConversations = (token) => {\n  return (dispatch) => {\n    return fetch(`${API}/chat/conversations`,{\n      method:'GET',\n      headers: {\n        \"Authorization\": token,\n        \"Content-Type\": 'application/json'\n      }\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n      dispatch({type:'GET_CONVERSATIONS', payload: resp})\n      return resp\n    })\n    .catch(console.error)\n  }\n}\n\nexport const getMessages = () => {\n  return (dispatch) => {\n    return fetch(`${API}/chat/messages`)\n    .then(resp => resp.json())\n    .then(resp => {\n      dispatch({type:'GET_MESSAGES', payload: resp})\n      return resp\n    })\n    .catch(console.error)\n  }\n\n}\n\nexport const sendMessage = (conversationId, token, state) => {\n  return (dispatch) => {\n    return fetch(`${API}/chat/conversations/${conversationId}`, {\n      method: 'POST',\n      headers: {\n        \"Authorization\": token,\n        \"Content-Type\": 'application/json'\n      },\n      body: JSON.stringify({'composedMessage': state})\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n      console.log(resp, 'this is inside sendMessage')\n      dispatch({type:'SEND_MESSAGE', payload: resp})\n      socket.emit('new message', resp)\n      return resp\n    })\n    .catch(console.error)\n  }\n}\n\nexport const singleConversation = (conversationId) => {\n  return (dispatch) => {\n    return fetch(`${API}/chat/conversations/${conversationId}`)\n    .then(resp => resp.json())\n    .then(resp => {\n      dispatch({type:'CURRENT_CONVERSATION', payload: resp})\n      return resp\n    })\n    .catch(console.error)\n  }\n}\n\nexport const getUsers = () => {\n  return (dispatch) => {\n    fetch(`${API}/chat/users`)\n    .then(resp => resp.json())\n    .then(resp => {\n      dispatch({type:'GET_USERS', payload: resp})\n    })\n    .catch(console.error)\n  }\n}\n\nexport const newConversation = (token, recipientId, message) => {\n  return (dispatch) => {\n    return fetch(`${API}/chat/new/${recipientId}`, {\n      method:\"POST\",\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify({'composedMessage': message})\n    })\n    .then(resp => resp.json())\n    .then(resp => {\n        dispatch({type:'CURRENT_CONVERSATION', payload: resp})\n        return resp\n    })\n    .catch(console.error)\n  }\n}\n\n//action creator which returns an action\nexport const setRecipientState = (recipient) => {\n  return {type: 'SET_RECIPIENT', payload: recipient}\n}\n\nexport const getUserAgain = (token) => {\n  const user = jwt_decode(token)\n  const id = user._id\n  return (dispatch) => {\n    fetch(`${API}/chat/users/${id}`)\n    .then(resp => resp.json())\n    .then(resp => {\n      dispatch({type:'GET_USER_AGAIN', payload: resp})\n    })\n    .catch(console.error)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}